devices:
  - id: "gpio-primary"
    type: "gpiochip"
    # Which implementation to use for controlling GPIO pins
    # Supported values: gpiod
    # gpiod: control using python3-libgpiod
    implementation: "gpiod"
    # name of the chip according to gpiod
    chipName: "gpiochip0"
    # Dictionary mapping strings to gpiod line numbers
    lineAliases:
      ID_SDA: 0
      ID_SCL: 1
      SDA1: 2
      SCL1: 3
      GPIO_GCLK: 4
      GPIO5: 5
      GPIO6: 6
      SPI_CE1_N: 7
      SPI_CE0_N: 8
      SPI_MISO: 9
      SPI_MOSI: 10
      SPI_SCLK: 11
      GPIO12: 12
      GPIO13: 13
      TXD1: 14
      RXD1: 15
      GPIO16: 16
      GPIO17: 17
      GPIO18: 18
      GPIO19: 19
      GPIO20: 20
      GPIO21: 21
      GPIO22: 22
      GPIO23: 23
      GPIO24: 24
      GPIO25: 25
      GPIO26: 26
      GPIO27: 27
      HDMI_HPD_N: 28
      STATUS_LED_G: 29
      CTS0: 30
      RTS0: 31
      TXD0: 32
      RXD0: 33
      SD1_CLK: 34
      SD1_CMD: 35
      SD1_DATA0: 36
      SD1_DATA1: 37
      SD1_DATA2: 38
      SD1_DATA3: 39
      PWM0_OUT: 40
      PWM1_OUT: 41
      ETH_CLK: 42
      WIFI_CLK: 43
      SDA0: 44
      SCL0: 45
      SMPS_SCL: 46
      SMPS_SDA: 47
      SD_CLK_R: 48
      SD_CMD_R: 49
      SD_DATA0_R: 50
      SD_DATA1_R: 51
      SD_DATA2_R: 52
      SD_DATA3_R: 53
      BCM_0: 0
      BCM_1: 1
      BCM_2: 2
      BCM_3: 3
      BCM_4: 4
      BCM_5: 5
      BCM_6: 6
      BCM_7: 7
      BCM_8: 8
      BCM_9: 9
      BCM_10: 10
      BCM_11: 11
      BCM_12: 12
      BCM_13: 13
      BCM_14: 14
      BCM_15: 15
      BCM_16: 16
      BCM_17: 17
      BCM_18: 18
      BCM_19: 19
      BCM_20: 20
      BCM_21: 21
      BCM_22: 22
      BCM_23: 23
      BCM_24: 24
      BCM_25: 25
      BCM_26: 26
      BCM_27: 27
      BCM_28: 28
      BCM_29: 29
      BCM_30: 30
      BCM_31: 31
      BCM_32: 32
      BCM_33: 33
      BCM_34: 34
      BCM_35: 35
      BCM_36: 36
      BCM_37: 37
      BCM_38: 38
      BCM_39: 39
      BCM_40: 40
      BCM_41: 41
      BCM_42: 42
      BCM_43: 43
      BCM_44: 44
      BCM_45: 45
      BCM_46: 46
      BCM_47: 47
      BCM_48: 48
      BCM_49: 49
      BCM_50: 50
      BCM_51: 51
      BCM_52: 52
      BCM_53: 53

  - id: "reactor-thermometer"
    type: "thermometer"
    # Type of thermometer to use for measuring the temp of the reactor
    # Supported values: w1_therm, serial
    # w1_therm: Supports the DS18S20, DS1822, DS18B20, DS28EA00 and DS1825/MAX31850K
    #           sensors using the 1 wire protocol. You'll need to add "dtoverlay=w1-gpio"
    #           to /boot/config.txt and reboot to use this
    # serial: reads the sensor data from a serial device
    implementation: "w1_therm"
    ## serial MODE CONFIG
    # Which device to read data from.
    #serialDevice: '/dev/ttyUSB1'

  - id: "reactor-temperature-controller"
    type: "tempController"
    # Which temperature controller implementation to use
    # Supported values: basic, simulation
    # basic: Basic hardware setup using two sets of pumps and a heating element
    #        some currently incomplete instructions for this are in docs/assembly
    # simulation: Simulates temperature changes due to heater and cooler activation
    #             No other configuration required or possible at the moment
    implementation: "basic"
    # device ID of the thermometer to use for detecting reactor temperature
    thermometerID: "reactor-thermometer"
    gpioID: "gpio-primary"
    # GPIO pin for activating the heating element
    heaterPin: BCM_26
    # GPIO pin for activating the heater pump(s)
    heaterPumpPin: BCM_20
    # GPIO pin for activating the cooler pump(s)
    coolerPin: BCM_21
    # list of device IDs that must be setup before this device
    dependencies: ["reactor-thermometer"]

  - id: "reactor-reagent-dispenser"
    type: "reagentDispenser"
    # Which reagent dispenser implementation to use
    # Supported values: syringepump, simulation
    # syringepump: The open source syringe pump referenced in the assembly documentation
    #              Uses grbl and stepper motors to dispense the reagents into the microlab
    # simulation: Does nothing but sleep to simulate dispensing a reagent
    implementation: "syringepump"
    ## syringepump MODE CONFIG
    # Serial device for communication with the Arduino
    arduinoPort: "/dev/ttyACM0"
    # Configuration for the syringe pump motors
    syringePumpsConfig:
      X:
        # Number of mm the stepper motor moves per full revolution,
        # this is the pitch of the threaded rod
        mmPerRev: 0.8
        # Number of steps per revolution of the stepper motor, reference the documentation for the motor
        stepsPerRev: 200
        # Number of mm of movement needed to dispense 1 ml of fluid,
        # this is the length of the syringe divided by its fluid capacity
        mmPerml: 3.5
        # Maximum speed the motor should run in mm/min
        maxmmPerMin: 240
      Y:
        # These are all the same as documented above but for the Y axis
        mmPerRev: 0.8
        stepsPerRev: 200
        mmPerml: 3.5
        maxmmPerMin: 240
    ## simulation MODE ARGS
    # None needed or supported at the moment

  - id: "reactor-stirrer"
    type: "stirrer"
    # Which stirrer implementation to use
    # Supported values: gpio_stirrer, simulation
    # gpio_stirrer: activates the stirrer by switching a gpio pin
    # simulation: Does nothing
    implementation: "gpio_stirrer"
    gpioID: "gpio-primary"
    ## gpio_stirrer MODE CONFIG
    # GPIO pin for activating the stirrer
    stirrerPin: BCM_16

    ## simulation MODE CONFIG
    # None needed or supported at the moment
